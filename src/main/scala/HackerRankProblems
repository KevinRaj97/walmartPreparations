1.Reverse An Array::


import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Result {

    /*
     * Complete the 'reverseArray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    def reverseArray(a: Array[Int]): Array[Int] ={
    // Write your code here 
    
    var temp1 = 0
    var temp2 = 0
    var index_position = 0
    var index_last_pos = a.length - 1
    while (index_position < index_last_pos) {
      temp1 = a(index_position)
      temp2 = a(index_last_pos)
      a(index_position) = temp2
      a(index_last_pos) = temp1
      index_position += 1
      index_last_pos -= 1
    }
    a
    }
    

}

object Solution {
    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val arrCount = StdIn.readLine.trim.toInt

        val arr = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)

        val res = Result.reverseArray(arr)

        printWriter.println(res.mkString(" "))

        printWriter.close()
    }
}


2.Left Rotation Of An Array::

import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Result {

    /*
     * Complete the 'rotateLeft' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER d
     *  2. INTEGER_ARRAY arr
     */

    def rotateLeft(d: Int, arr: Array[Int]): Array[Int] = {
    // Write your code here
     for (j <- 0 until d) {
      val first = arr(0)
      for (i <- 0 until arr.length - 1) {
        arr(i) = arr(i + 1)
      }
      arr(arr.length - 1) = first
     }
    arr
  }


}

object Solution {
    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val firstMultipleInput = StdIn.readLine.replaceAll("\\s+$", "").split(" ")

        val n = firstMultipleInput(0).toInt

        val d = firstMultipleInput(1).toInt

        val arr = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)

        val result = Result.rotateLeft(d, arr)

        printWriter.println(result.mkString(" "))

        printWriter.close()
    }
}


3.Maximum Element::


import scala.collection.mutable
import scala.io.StdIn

object StackExample extends App {

  println("Range")
  val range = StdIn.readInt()

  var mainStack = mutable.Stack[Int]()
  var maxStack = mutable.Stack[Int]()

  maxStack.push(Integer.MIN_VALUE)

  for (i <- 1 to range) {
    println("choose option")
    val iterator = StdIn.readInt()

    iterator match {
      case 1 =>
        println("print the value")
        var push = StdIn.readInt()
        mainStack.push(push)
        var max = mainStack.top
        if (push > max) {
          maxStack.push(max)
        }
        else {
          maxStack.push(max)
        }

      case 2 =>
        mainStack.pop()
        maxStack.pop()

      case 3 =>
        println("MAximum value is  " + maxStack.top)
    }
  }
  
}

